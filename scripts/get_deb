#!/bin/bash
#
# Given a repo and a list of packages, go download the latest matching deb
#
# TODO
# - with the new apt.cache subdir, some of this file can be cleaned up into
#   templated files that are copied into place
# - the print_uris.txt file is not very useful now that it gets overwritten
# - Check the hash of the downloaded file!

set -e

ARCH="$1"
shift

REPO="$1"
shift

OUTDIR="$1"
shift

if [ -z "$ARCH" -o -z "$REPO" -o -z "$OUTDIR" -o -z "$1" ]; then
    echo "Usage: $0 arch repo unpackdir pkg..."
    exit 1
fi

if [ -z "$TOP_DIR" ]; then
    echo "Need env TOP_DIR set"
    exit 1
fi

if [ ! -r "$TOP_DIR/apt.sources/$REPO.list" ]; then
    echo "No dpkg source list found for repo called $REPO"
    exit 1
fi

CACHEDIR="$TOP_DIR/apt.cache/"
mkdir -p "$CACHEDIR"

mkdir -p "$OUTDIR"
cd  "$OUTDIR"

mkdir -p $CACHEDIR/etc/apt/sources.list.d
cp "$TOP_DIR/apt.sources/$REPO.list" $CACHEDIR/etc/apt/sources.list.d/

TRUSTED=$CACHEDIR/etc/apt/trusted.gpg
# It would be nice to fill the keyring..

TRUSTED_PARTS=${TRUSTED}.d/
mkdir -p $TRUSTED_PARTS

ETC=$CACHEDIR/etc/apt
mkdir -p $ETC
ETC_PARTS=$ETC/apt.conf.d/
mkdir -p $ETC_PARTS

ETC_PREFS_PARTS=$ETC/preferences.d/
mkdir -p $ETC_PREFS_PARTS

STATE=$CACHEDIR/var/lib/apt/
mkdir -p $STATE

STATUS=$CACHEDIR/var/lib/dpkg/status
mkdir -p "$(dirname $STATUS)"
touch $STATUS

CACHE=$CACHEDIR/var/cache/apt
mkdir -p $CACHE

export APT_CONFIG=$CACHEDIR/apt_config
cat >$APT_CONFIG <<EOF
Dir::Etc "$ETC";
Dir::Etc::Parts "$ETC_PARTS";
Dir::Etc::PreferencesParts "$ETC_PREFS_PARTS";
EOF

# provide some trust
if [ -r "$TOP_DIR/apt.sources/$REPO.key.asc" ]; then
    cp "$TOP_DIR/apt.sources/$REPO.key.asc" "${TRUSTED_PARTS}/"
else
    # use the current system for trust files
    cp /etc/apt/trusted.gpg ${TRUSTED}
    cp /etc/apt/trusted.gpg.d/* ${TRUSTED_PARTS}
fi

#    -o APT::Default-Release='*' \
APT_OPTS="\
    -o Apt::Architecture=$ARCH \
    -o Apt::Get::AllowUnauthenticated=true \
    -o Apt::Get::Download-Only=true \
    -o Apt::Install-Recommends=false \
    -o Dir::Etc::TrustedParts=$TRUSTED_PARTS \
    -o Dir::Etc::Trusted=$TRUSTED \
    -o Dir=$CACHEDIR \
    -o Dir::Etc=$ETC \
    -o Dir::Etc::Parts=$ETC_PARTS \
    -o Dir::Etc::PreferencesParts=$ETC_PREFS_PARTS \
    -o Dir::State=$STATE \
    -o Dir::State::Status=$STATUS \
    -o Dir::Cache=$CACHE \
"

apt-get $APT_OPTS update

apt-get $APT_OPTS --print-uris download "$@" >$CACHEDIR/print_uris.txt

while read URI DEB SIZE HASH; do
    # if the URI is empty, dont try to download anything
    if [ -z "$URI" ]; then
        continue
    fi

    # only download the file if we dont have it
    if [ ! -e "$CACHEDIR/${DEB}" ]; then
        wget -O "$CACHEDIR/${DEB}.tmp" $(echo "$URI" |tr -d "'")
        if [ $? -ne 0 ]; then
            echo bad wget
            exit 1
        fi

        # TODO
        # - check size and hash
        mv "$CACHEDIR/${DEB}.tmp" "$CACHEDIR/${DEB}"
    fi

    # always extract the deb to ensure that the destination dir has the
    # correct files
    dpkg -x "$CACHEDIR/$DEB" ./
    if [ $? -ne 0 ]; then
        echo bad dpkg extract
        exit 1
    fi
done <$CACHEDIR/print_uris.txt

